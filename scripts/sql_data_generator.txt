# generate_sql_data.py
import pandas as pd
from faker import Faker
import random
from datetime import datetime, timedelta

fake = Faker('es_ES') # O el idioma que prefieras para nombres/direcciones

def generate_customers(num_customers):
    customers = []
    for i in range(num_customers):
        customer_id = i + 1
        name = fake.name()
        email = fake.email()
        address = fake.address()
        registration_date = fake.date_between(start_date='-5y', end_date='today')
        # Introducir nulos en el email para demostrar limpieza
        if random.random() < 0.05: # 5% de nulos
            email = None
        customers.append({
            'customer_id': customer_id,
            'name': name,
            'email': email,
            'address': address,
            'registration_date': registration_date
        })
    return pd.DataFrame(customers)

def generate_products(num_products):
    products = []
    categories = ['Electronics', 'Books', 'Clothing', 'Home Goods', 'Food', 'Beauty']
    for i in range(num_products):
        product_id = i + 1
        name = fake.word().capitalize() + " " + random.choice(['Pro', 'Max', 'Lite', 'XL', 'Mini', 'Basic'])
        category = random.choice(categories)
        price = round(random.uniform(5.0, 1000.0), 2)
        stock = random.randint(0, 500)
        # Introduce productos con stock cero para simular escasez
        if random.random() < 0.02: # 2% de stock cero
            stock = 0
        products.append({
            'product_id': product_id,
            'name': name,
            'category': category,
            'price': price,
            'stock': stock
        })
    return pd.DataFrame(products)

def generate_orders(num_orders, customer_ids, product_ids):
    orders = []
    start_date = datetime.now() - timedelta(days=365) # Último año
    
    for i in range(num_orders):
        order_id = i + 1
        customer_id = random.choice(customer_ids)
        product_id = random.choice(product_ids)
        order_date = start_date + timedelta(days=random.randint(0, 364), seconds=random.randint(0, 86399))
        quantity = random.randint(1, 5)
        
        # Simular algunos pagos fallidos
        status = random.choice(['completed', 'completed', 'completed', 'pending', 'failed'])
        if status == 'failed' and random.random() < 0.1: # 10% de los fallidos no tienen fecha de envío
             shipping_date = None
        else:
            shipping_date = order_date + timedelta(days=random.randint(1, 7)) if status == 'completed' else None
        
        orders.append({
            'order_id': order_id,
            'customer_id': customer_id,
            'product_id': product_id,
            'order_date': order_date.isoformat(),
            'quantity': quantity,
            'status': status,
            'shipping_date': shipping_date.isoformat() if shipping_date else None
        })
    return pd.DataFrame(orders)

if __name__ == "__main__":
    NUM_CUSTOMERS = 20000
    NUM_PRODUCTS = 2000
    NUM_ORDERS = 200000

    print(f"Generando {NUM_CUSTOMERS} clientes...")
    customers_df = generate_customers(NUM_CUSTOMERS)
    customers_df.to_csv('customers.csv', index=False)
    print("customers.csv generado.")

    print(f"Generando {NUM_PRODUCTS} productos...")
    products_df = generate_products(NUM_PRODUCTS)
    products_df.to_csv('products.csv', index=False)
    print("products.csv generado.")

    customer_ids = customers_df['customer_id'].tolist()
    product_ids = products_df['product_id'].tolist()
    print(f"Generando {NUM_ORDERS} pedidos...")
    orders_df = generate_orders(NUM_ORDERS, customer_ids, product_ids)
    orders_df.to_csv('orders.csv', index=False)
    print("orders.csv generado.")

    print("Data SQL simulada generada exitosamente.")